var documenterSearchIndex = {"docs":
[{"location":"#GPUGraphs","page":"Home","title":"GPUGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GPUGraphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#GPUGraphs.AbstractSparseGPUMatrix","page":"Home","title":"GPUGraphs.AbstractSparseGPUMatrix","text":"Abstract type for a GPU compatible sparse matrix\n\n\n\n\n\n","category":"type"},{"location":"#GPUGraphs.SparseGPUMatrixCSR","page":"Home","title":"GPUGraphs.SparseGPUMatrixCSR","text":"SparseGPUMatrixCSR{Tv,Ti<:Integer} <: SparseArrays.AbstractSparseMatrix{Tv,Ti}\nTv : Type of the stored values\nTi : Type of the stored indices\nA sparse matrix in Compressed Sparse Row format for GPU graph processing.\n\nThe matrix is stored in CSR format, with the following fields:\n- `m::Int` : Number of rows\n- `n::Int` : Number of columns\n- `rowptr::AbstractGPUVector{Ti}` : Row i is in rowptr[i]:(rowptr[i+1]-1)\n- `colval::AbstractGPUVector{Ti}` : Col indices of stored values\n- `nzval::AbstractGPUVector{Tv}` : Stored values, typically nonzeros\n\n\n\n\n\n","category":"type"},{"location":"#GPUGraphs.SparseGPUVector","page":"Home","title":"GPUGraphs.SparseGPUVector","text":"SparseGPUVector{Tv,Ti<:Integer} <: AbstractSparseVector{Tv,Ti}\nTv : Type of the stored values\nTi : Type of the stored indices\nA sparse vector in Compressed Sparse Row format.\n\n\n\n\n\n","category":"type"}]
}
